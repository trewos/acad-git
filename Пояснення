1) git --amend & git reset --hard @~
Для виконання цього завдання спочатку потрібно зробити коміт "git commit -m". Далі за допомогою команди "git --amend" можна змінити назву коміту. Для того, що відмінти коміт зі скасуванням змін в робочому середовищі та індекусі використовується команда "git reset --hard <ssh-commit>".

2) Відміна злиття.
Було створено другу гілку та додано до неї зміни. Після чого на гілці main використовується команда "git merge dev" для злиття гілок. Для відміни злиття було задіяно команду "git reset --hard ORIG_HEAD".

3) Перегляд видалених комітів. 
Для початку було видалено коміт за допомогою команди "git reset --hard". Так, як це коміт злиття було використано команду git cherry-pick -m <parrent-branch-number> <ssh-commit>.

4) Використання тегів в Git
Щоб створити тег для коміту виконується спочатку команда git log для отримання <ssh-commit>. Далі за допомогою команди git teg <name> <ssh-commit> створюється тег на який можна перейти за допомогою команди "git checkout <name>". В нашому випадку "git checkout v1.0"

5) fork, branch і clone

Fork дозволяє створити власну копію чужого проекту, в якій можна вносити зміни, не впливаючи на оригінальний проєкт. Після внесення змін у fork, можна надіслати pull request для об'єднання змін із основним репозиторієм.

Branch ізольована лінія розвитку, яка виходить з основної гілки main.

Clone використовується для створення копії репозиторію з віддаленого сервера на локальному пристрої.

6) Pull Request 
Pull Request - це запит на злиття змін із однієї гілки коду в основну гілку проекту. 

Шлях виконання Pull Request:
Створення гілки.
Внесення змін.
Commit та Push.
Створення Pull Request - зазвичай створюється через сайти з сховищем git (GitHun, BitBucket, GitLib)
Мerge

7) git pull & git fetch

git pull - команда, яка витягує зміни з віддаленого репозиторію та об'єднує їх із поточним робочим каталогом. Команда автоматично об'єднує зміни із віддаленим гілковим репозиторієм і робочим каталогом. Вона включає в себе git fetch, а потім автоматично викликає git merge, щоб об'єднати отримані зміни.

git fetch - команда також отримує зміни з віддаленого репозиторію, але вона не об'єднує їх із поточною робочою гілкою. Вона просто збирає всі нові гілки, коміти та інші об'єкти з віддаленого репозиторію, оновлює віддалені гілки, але не робить змін в робочому каталозі або локальних гілках.

8) git stash

Щоб почати роботу з цією командою потрібно ввести "git stash". Після цього всі зміни поміщаються в сховище в якому можна зберегти ці зміни через оператор save.
Коли було виконано перехід на гілку main і назад до dev можна використати "git stash pop", яка поверне зміни в файли та видалить зміни зі сховища, або "git stash apply", яка поверне зміни та залишить їх в сховищі.
